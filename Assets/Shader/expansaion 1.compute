#pragma kernel CSMain

Texture2D<float4> reader; 
Texture2D<float4> texsec;
RWTexture2D<float4> writer;
SamplerState _LinearClamp;
float _r2;
float _r1;
float _p2;
float _p1;
float _b1;
float _b2;
float _b3;
float _b4;
float _b5;
float _b6;
float _time;

float rand (float2 uv ) {return frac ( sin ( dot ( floor(uv),float2(94.25,43.14)))*4587.236+_time*0.1);}
float noise ( float2 uv) {
float a = rand(uv);
float b = rand (uv+float2(1,0));
 float c  = rand (uv+float2(0,1));
 float d  = rand ( uv+float2(1,1));
float2 u =smoothstep(0.,1.,frac(uv));
return lerp (a,b,u.x)+(c-a)*u.y*(1.-u.x)+(d-b)*u.x*u.y;
}
float fmb ( float2 uv) {
float val = 0.;
float amp = 0.5;
float frec = 0.;
for (int i =0; i<6; i++){
//val += smoothstep(0.1,0.029,amp* abs((noise (uv)-0.5)*2.));
//uv*=1.2;
//uv+=48.78;
val += amp*noise(uv);
uv*=2.;
amp*=.5;
}
return val;
}
float2 rnd2(float2 x) {  
return sign(frac(3458.365*sin((x+_time)*float2(47.212,-91.23)))*4.-2.);}
float rnd(float x ) {  return sign(frac(3458.365*sin(x))*2.-1.);}
float2 map2(float2 value, float2 min1, float2 max1, float2 min2, float2 max2) {
return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
float Gaussian (float sigma, float x){
return exp(-(x*x) / (2.0 * sigma*sigma));
}
float blur (in float2 uv){
float c = _b3;
float c2 = 0.01*_b4;
float total = 0.0;
float ret = 0.;
int nbr = 8;
for (int iy = 0; iy < nbr; ++iy){
float fy = Gaussian (c, float(iy-nbr/2));
float offsety = float(iy-nbr/2) * c2;
for (int ix = 0; ix < nbr; ++ix){
float fx = Gaussian (c, float(ix-nbr/2));
float offsetx = float(ix-nbr/2) *c2;
total += fx * fy;            
ret += texsec.SampleLevel(_LinearClamp, uv + float2(offsetx, offsety),0).r * fx*fy;}
}
return ret / total;
}
[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	float2 resolution=float2(_r1,_r2);
	float2 uv = f/resolution.xy;
    float rt = resolution.x/resolution.y;
	float2 uv2 = uv;
    uv2.x *= rt;

	float2 uv4 = map2(uv, float2(0.,0.),float2(1.,1.),float2(1.-0.95,1.-0.68),float2(1.-0.07,1.-0.075));
	//float c3 = smoothstep(_b5,_b6,smoothstep(_b1,_b2,blur(1. -uv4+float2(0.5,0.5)/resolution)));
	float c3 =  smoothstep(_b1,_b2,texsec.SampleLevel(_LinearClamp, 1. -uv4+float2(0.5,0.5)/resolution ,0).r);
    float fpt = step(distance(uv2,float2(_p1/_r1*rt,_p2/_r2)),100./resolution.x);
    float b = c3;
    float T = 0.;
    for (int j=-1; j<=1; j++)
        for (int i=-1; i<=1; i++) {
    float2 d = float2(i,j);
    float T = reader.SampleLevel(_LinearClamp,frac((float2(id.x,id.y)+d)/resolution)+float2(0.5,0.5)/resolution,0).x;
    if (T==1.&& rnd((id.x*resolution.x+d.x+_time)*45.236)==-d.y && rnd((id.y*resolution.y+d.y+_time)*-92.265)==-d.x){	
	b = max(b,T*smoothstep(0.4,0.5,fmb(uv2*5.))) ;}
    }
	

	writer[id] = float4 (b,b,b,1.);
	
}
