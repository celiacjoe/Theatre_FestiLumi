#pragma kernel CSMain

Texture2D<float4> reader; 
RWTexture2D<float4> writer;
SamplerState _LinearClamp;
float _r2;
float _r1;
float _p2;
float _p1;
float _time;
float _v1;
float _v2;
float _v3;
float _v4;
float _v5;
float _v6;
float _v7;
float _v8;
float _v9;
float _v10;
float3 _c1;
float3 _c2;
float rd (float t) {return frac(sin(dot(floor(t),12.45))*4597.268);}
float no (float t) {return lerp(rd(t),rd(t+1.0),smoothstep(0.,1.,frac(t)));}
float rand (float2 uv ) {return frac ( sin ( dot ( floor(uv),float2(94.25,43.14)))*4587.236+_time);}
float noise ( float2 uv) {
float a = rand(uv);
float b = rand (uv+float2(1,0));
 float c  = rand (uv+float2(0,1));
 float d  = rand ( uv+float2(1,1));
float2 u =smoothstep(0.,1.,frac(uv));
return lerp (a,b,u.x)+(c-a)*u.y*(1.-u.x)+(d-b)*u.x*u.y;
}
float fmb ( float2 uv) {
float val = 0.;
float amp = 0.5;
float frec = 0.;
for (int i =0; i<6; i++){
val += amp* rand (uv);
uv*=2.;
amp*=.5;
}
return val;
}
float G1V(float dnv, float k){
    return 1.0/(dnv*(1.0-k)+k);
}

float ggx(float3 n, float3 v, float3 l, float rough, float f0){
    float alpha = rough*rough;
    float3 h = normalize(v+l);
    float dnl = clamp(dot(n,l), 0.0, 1.0);
    float dnv = clamp(dot(n,v), 0.0, 1.0);
    float dnh = clamp(dot(n,h), 0.0, 1.0);
    float dlh = clamp(dot(l,h), 0.0, 1.0);
    float f, d, vis;
    float asqr = alpha*alpha;
    const float pi = 3.14159;
    float den = dnh*dnh*(asqr-1.0)+1.0;
    d = asqr/(pi * den * den);
    dlh = pow(1.0-dlh, 5.0);
    f = f0 + (1.0-f0)*dlh;
    float k = alpha/1.0;
    vis = G1V(dnl, k)*G1V(dnv, k);
    float spec = dnl * d * f * vis;
    return spec;
}
float ov(float x, float y)
{
    if (x < 0.5)
        return 2.0*x*y;
    else
        return 1.0 - 2.0*(1.0 - x)*(1.0 - y);
}
[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	//float vo1 = _p1/_r1;
	//float vo2 = _p2/_r2;
	float vo1 = no(_time*2.+785.236);
	float vo2 = no(_time*2.+164.666);
	float2 tr = float2(lerp(0.4,0.5,abs((vo1-0.5)*2.))*lerp(-1.,1.,step(0.5,vo1)),lerp(1.,0.85,abs((vo2-0.5)*2.)));
	float2 b = tr;
	float2 iResolution=float2(_r1,_r2); //texture resolution
	float2 uv = f/iResolution;
	uv.x *= iResolution.x/iResolution.y;
	float2 v = float2(0.0,0.0);
	float4 c = float4(0,0,0,1);   //initial color
	for(int l=0;l<20;l++)
	{
		if ( dot(b,b) > pow(iResolution.y,2.0) ) break;
		float2 p = b;
		for(int i=0;i<5;i++)
		{          
			float2 pos = f+p; 
			float rot=0.0;
			for(int i=0;i<5;i++)
			{
				rot+=dot(reader.SampleLevel(_LinearClamp,float2(frac((pos+p)/iResolution.xy)),0).a-float2(0.5,0.5),float2(-1.,1.)*p.yx);
				p=float2(tr.x*p.x+tr.y*p.y,-tr.y*p.x+tr.x*p.y); 
			}
			v+=p.yx* rot/5.0/dot(b,b);      
			p=float2(tr.x*p.x+tr.y*p.y,-tr.y*p.x+tr.x*p.y);
		}
		b*=2.0;
	}   
	float co=reader.SampleLevel(_LinearClamp,frac((f+v*float2((no(_time+81.36)-0.5)*4.,(no(_time+43.65)-0.5)*-4.))/iResolution.xy),0).a; 
	co += smoothstep(50.,0.,distance(f,float2(vo1 *_r1,vo1 *_r2)))*no(_time+69.23);
	float delta = 1./_r2;
	float2 texcoord = f/iResolution;
    //float jitter = frac(sin(dot(texcoord, float2(41.97, 289.13)))*43758.5453)*min(distance(float2(_r5,_r5),texcoord), 1.);
    float2 tuv = (-texcoord +0.5)*0.01*_v10;
	float c1 = 0.;
	float c2 = 0.;
	float c3 = 0.;
    float c4 = 0.;
    float2 uv2 = texcoord;
	float2 mousepo = float2(0.,0.7);
	for ( int i = 0; i < 64; i++ )
	{		
		float depth = (float(i) ) / 64.; 
        uv2 -= tuv ;		        
		c1 = reader.SampleLevel(_LinearClamp, uv2+tuv*64.,0).a;
		c2 = smoothstep(0.,0.1,c1-reader.SampleLevel(_LinearClamp, uv2+tuv*40.+mousepo*0.1,0).a);
		c3 = reader.SampleLevel(_LinearClamp, uv2+tuv*64.+ float2(delta, 0.0),0).a;
		c4 = reader.SampleLevel(_LinearClamp, uv2+tuv*64.+ float2(0.0,delta),0).a;
		if ( 1.-dot(c1, 1.) < depth) break;

	}
	float dx = (c1 - c3) / delta/64.;
    float dy = (c1 - c4) / delta/64.;
    float3 normal =float3(dx, dy, 0.);
	float3 sp = float3(uv-0.5, 0);
    float3 light = float3(cos(_time.x/2.0)*0.5, sin(_time.x/2.0)*0.5, _v3);
    float3 ld = light - sp;
    float lDist = max(length(ld), 0.001);
    ld /= lDist;
	//float spec = 0.;
	float spec = ggx((normalize(normal)*0.5+0.5)*_v4, float3(0.,1.,0.), ld, _v5, _v6);
	//float asc = dot (normal,float3(-0.3,-0.5,0.8));
	float3 col = sin(spec * float3(0.0, 1.0, 0.0) * 40.0 * _v7) * 0.5 + 0.5;  
    col += sin(spec * float3(1.0, 0.0, 0.0) * 40.0 *_v8) * 0.5 + 0.5;  
    col += sin(spec * float3(0.0, 0.0, 1.0) * 40.0 *_v9) * 0.5 + 0.5;
	col = clamp(normalize(col), 0.0, 1.0);
	float3 ovf = float3 (ov(spec,col.x),ov(spec,col.y),ov(spec,col.z));
	float3 t = lerp(_c1,_c2,smoothstep(_v1,_v2,dot(normal.xy*10.,float2(0.,0.3))));
	//float spe = dot(normal.xy,float2(0.,0.3));
	float3 ovs = float3 (ov(ovf.x,t.x),ov(ovf.y,t.y),ov(ovf.z,t.z));
	writer[id]=float4(normal,co);
}
